// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  profile_image Bytes?
  role UserRole @default(USER)
  projects Project[]
  isActive Boolean @default(true)
  // relação de requisições que o user faz
  sentRequests     Friendship[] @relation("RequestingUser")
  // relação de requisições que o user recebe
  receivedRequests Friendship[] @relation("ReceivingUser")
  // relação entre organização/empresas
  organizationId String? 
  organization Organization? @relation(fields: [organizationId], references: [id])
  

  createdAssignments ProjectAssignment[] @relation("CreatorAssignments")

  // Inverso da relação para quem foi atribuído
  receivedAssignments ProjectAssignment[] @relation("AssignedUser")
  observations Observation[] 


  collaboratedProjects Project[] @relation("ProjectCollaborators")
}


model Organization {
  id String @id @default(uuid())
  name String
  users User[]
  projects Project[]
  createdAt DateTime @default(now())

  ProjectAssignment ProjectAssignment[]
}

model Project {
  id        String   @id @default(uuid())
  name      String
  description String
  createdAt DateTime @default(now())
  userId    String
  status  ProjectStatus @default(PENDENTE)
  priority PriorityStatus @default(NORMAL)
  deadline   DateTime? @default(now())
  user      User     @relation(fields: [userId], references: [id])
  pogress Int @default(0)
  // Orçamento do projeto
  budget Float
  tag String?
  organizationId String?
  organization Organization? @relation(fields: [organizationId], references: [id])
  archived Boolean @default(false)
  field String? @default("Campo não definido")
  collaborators User[] @relation("ProjectCollaborators")

  //isPublic Boolean @default(false)
  

  ProjectAssignment ProjectAssignment[]
}

model Friendship {
  id         String   @id @default(uuid())
  requester  User     @relation("RequestingUser", fields: [requesterId], references: [id])
  requesterId String

  recipient  User     @relation("ReceivingUser", fields: [recipientId], references: [id])
  recipientId String

  status     FriendshipStatus @default(PENDENTE)
  createdAt  DateTime @default(now())
}

enum FriendshipStatus {
  PENDENTE
  ACEITA
  NEGADA
}


enum UserRole {
  ADMIN
  GERENTE
  USER
  GUEST
}


enum ProjectStatus {
  PENDENTE
  EM_PROGRESSO
  COMPLETO
}

enum PriorityStatus {
  CRITICA
  ALTA
  NORMAL
} 


model  ProjectAssignment {
  id String @id @default(uuid())
  creator     User?     @relation("CreatorAssignments", fields: [creatorId], references: [id])
  creatorId   String?
  project Project @relation(fields: [projectId], references: [id])
  projectId String
  user        User?     @relation("AssignedUser", fields: [userId], references: [id])
  userId      String?
  status ProjectStatus @default(EM_PROGRESSO)
  task String
  description String
  assignedAt DateTime @default(now())
  deadline   DateTime?
  orgId Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  obsv Observation[]
  updatedAt  DateTime @updatedAt @default(now()) // Corrigido
}


model Observation {
  id String @id @default(ulid())
  creator User @relation(fields: [creatorId], references: [id])
  creatorId String
  task ProjectAssignment @relation(fields: [taskId], references: [id])
  taskId String
  content String 
  createdAt DateTime @default(now())
} 